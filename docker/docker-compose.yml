version: '3.8'

services:
  # CCGL Analytics 主应用
  ccgl-analytics:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: ccgl-analytics
    restart: unless-stopped
    ports:
      - "8000:8000"  # Web仪表板端口
      - "8080:8080"  # MCP服务器端口
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=ccgl_warehouse
      - DB_USER=ccgl_app
      - DB_PASSWORD=app123
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WEB_HOST=0.0.0.0
      - WEB_PORT=8000
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8080
      - LOG_LEVEL=INFO
    volumes:
      - ./output:/app/output
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - mysql
      - redis
    networks:
      - ccgl-network
    command: ["python", "main.py"]

  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: ccgl-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=ccgl_warehouse
      - MYSQL_USER=ccgl_app
      - MYSQL_PASSWORD=app123
    volumes:
      - mysql_data:/var/lib/mysql
      - ../database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ../database/sample_data.sql:/docker-entrypoint-initdb.d/02-sample_data.sql
    networks:
      - ccgl-network
    command: --default-authentication-plugin=mysql_native_password

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: ccgl-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ccgl-network
    command: redis-server --appendonly yes

  # CCGL Web 仪表板服务
  ccgl-dashboard:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: ccgl-dashboard
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=ccgl_warehouse
      - DB_USER=ccgl_readonly
      - DB_PASSWORD=readonly123
      - WEB_HOST=0.0.0.0
      - WEB_PORT=8000
    volumes:
      - ./output:/app/output
    depends_on:
      - mysql
      - ccgl-analytics
    networks:
      - ccgl-network
    command: ["python", "-m", "ccgl_analytics.modules.web_dashboard"]

  # 监控服务 (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: ccgl-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - ccgl-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana 仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: ccgl-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ccgl-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: ccgl-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - ccgl-analytics
      - ccgl-dashboard
    networks:
      - ccgl-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ccgl-network:
    driver: bridge